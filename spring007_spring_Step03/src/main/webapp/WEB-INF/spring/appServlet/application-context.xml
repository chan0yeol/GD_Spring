<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!-- TODO 10608 properties -->
	<bean
		class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:properties/oracleDB.properties</value>
			</list>
		</property>
	</bean>

	<!-- TODO 10609 dataSource 생성 DBCP -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${user}" />
		<property name="password" value="${pw}" />
	</bean>
	<!-- TODO 10610 SqlSessionFactoryBean 생성 -->
	<bean id="sqlSessionFactoryBean"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/Config.xml" />
	</bean>
	<!-- TODO 10611 SqlSessionTemplate 생성 -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean" />
	</bean>
	
	<!-- TODO 10701 TransactionManager -->
	<!-- Transaction을 Annotation방법으로 사용하기 위한 설정 TransactionManager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- TODO 10803 AOP 트랜잭션 처리 -->
	<!-- 
		IoC 구조에서 Bean의 기능을 조합하여 Service에서 독립적으로 실행이 가능함.
		Life-Cycle구조에서는 절대 DAO를 제어할 수 없다.
		하지만 IoC 구조에서는 service에서 조합되는 Dao의 메소드를 제어하여 RollBack
	 -->
	 <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception"/>
		</tx:attributes>	 	
	 </tx:advice>
	 
	 <aop:config>
	 	<aop:pointcut expression="execution(public * com.min.edu.model.*Service*.*(..))" id="transactionPointCut"/>
	 	<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointCut"/>	
	 </aop:config>
</beans>
